<!-- Google Font -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Gasoek+One&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@900&display=swap" rel="stylesheet">
<!--   Core JS Files   -->
<script src="assets/js/core/popper.min.js"></script>
<script src="assets/js/core/bootstrap.min.js"></script>
<script src="assets/js/plugins/perfect-scrollbar.min.js"></script>
<script src="assets/js/plugins/smooth-scrollbar.min.js"></script>
<script src="assets/js/plugins/chartjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.7.0/vanilla-tilt.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.2.6/gsap.min.js"></script>
<script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/Physics2DPlugin3.min.js"></script>
{{>layout/indexF}}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btnStart').forEach(function (button) {
            button.addEventListener('click', function (event) {
                event.preventDefault(); // 기본 이벤트 동작을 막음 (여기서는 링크 이동을 막음)

                // 1000ms(1초) 후에 페이지 이동
                setTimeout(function () {
                    var targetURL = button.parentElement.getAttribute('href');
                    window.location.href = targetURL;
                }, 1300);
            });
        });
    });
</script>


<!--시작하기버튼 script-->
<script>
    gsap.registerPlugin(Physics2DPlugin);

    document.querySelectorAll('.btnStart').forEach(btnStart => {

        const bounding = btnStart.getBoundingClientRect()

        btnStart.addEventListener('mousemove', e => {

            let dy = (e.clientY - bounding.top - bounding.height / 2) / -1
            let dx = (e.clientX - bounding.left - bounding.width / 2) / 10

            dy = dy > 10 ? 10 : (dy < -10 ? -10 : dy);
            dx = dx > 4 ? 4 : (dx < -4 ? -4 : dx);

            btnStart.style.setProperty('--rx', dy);
            btnStart.style.setProperty('--ry', dx);

        });

        btnStart.addEventListener('mouseleave', e => {

            btnStart.style.setProperty('--rx', 0)
            btnStart.style.setProperty('--ry', 0)

        });

        btnStart.addEventListener('click', e => {
            btnStart.classList.add('success');
            gsap.to(btnStart, {
                '--icon-x': -3,
                '--icon-y': 3,
                '--z-before': 0,
                duration: .2,
                onComplete() {
                    particles(btnStart.querySelector('.startEmitter'), 100, -4, 6, -80, -50);
                    gsap.to(btnStart, {
                        '--icon-x': 0,
                        '--icon-y': 0,
                        '--z-before': -6,
                        duration: 1,
                        ease: 'elastic.out(1, .5)',
                        onComplete() {
                            btnStart.classList.remove('success');
                        }
                    });
                }
            });
        });

    });

    function particles(parent, quantity, x, y, minAngle, maxAngle) {
        let colors = [
            '#FFFF04',
            '#EA4C89',
            '#892AB8',
            '#4AF2FD',
        ];
        for (let i = quantity - 1; i >= 0; i--) {
            let angle = gsap.utils.random(minAngle, maxAngle),
                    velocity = gsap.utils.random(70, 140),
                    dot = document.createElement('div');
            dot.style.setProperty('--b', colors[Math.floor(gsap.utils.random(0, 4))]);
            parent.appendChild(dot);
            gsap.set(dot, {
                opacity: 0,
                x: x,
                y: y,
                scale: gsap.utils.random(.4, .7)
            });
            gsap.timeline({
                onComplete() {
                    dot.remove();
                }
            }).to(dot, {
                duration: .05,
                opacity: 1
            }, 0).to(dot, {
                duration: 1.8,
                rotationX: `-=${gsap.utils.random(720, 1440)}`,
                rotationZ: `+=${gsap.utils.random(720, 1440)}`,
                physics2D: {
                    angle: angle,
                    velocity: velocity,
                    gravity: 120
                }
            }, 0).to(dot, {
                duration: 1,
                opacity: 0
            }, .8);
        }
    }
</script>

<script>
    var ctx = document.getElementById("chart-bars").getContext("2d");

    new Chart(ctx, {
        type: "bar",
        data: {
            labels: ["M", "T", "W", "T", "F", "S", "S"],
            datasets: [{
                label: "Sales",
                tension: 0.4,
                borderWidth: 0,
                borderRadius: 4,
                borderSkipped: false,
                backgroundColor: "rgba(255, 255, 255, .8)",
                data: [50, 20, 10, 22, 50, 10, 40],
                maxBarThickness: 6
            }, ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                }
            },
            interaction: {
                intersect: false,
                mode: 'index',
            },
            scales: {
                y: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 255, 255, .2)'
                    },
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: 500,
                        beginAtZero: true,
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                        color: "#fff"
                    },
                },
                x: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 255, 255, .2)'
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
            },
        },
    });


    var ctx2 = document.getElementById("chart-line").getContext("2d");

    new Chart(ctx2, {
        type: "line",
        data: {
            labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            datasets: [{
                label: "Mobile apps",
                tension: 0,
                borderWidth: 0,
                pointRadius: 5,
                pointBackgroundColor: "rgba(255, 255, 255, .8)",
                pointBorderColor: "transparent",
                borderColor: "rgba(255, 255, 255, .8)",
                borderColor: "rgba(255, 255, 255, .8)",
                borderWidth: 4,
                backgroundColor: "transparent",
                fill: true,
                data: [50, 40, 300, 320, 500, 350, 200, 230, 500],
                maxBarThickness: 6

            }],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                }
            },
            interaction: {
                intersect: false,
                mode: 'index',
            },
            scales: {
                y: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 255, 255, .2)'
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
                x: {
                    grid: {
                        drawBorder: false,
                        display: false,
                        drawOnChartArea: false,
                        drawTicks: false,
                        borderDash: [5, 5]
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
            },
        },
    });

    var ctx3 = document.getElementById("chart-line-tasks").getContext("2d");

    new Chart(ctx3, {
        type: "line",
        data: {
            labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            datasets: [{
                label: "Mobile apps",
                tension: 0,
                borderWidth: 0,
                pointRadius: 5,
                pointBackgroundColor: "rgba(255, 255, 255, .8)",
                pointBorderColor: "transparent",
                borderColor: "rgba(255, 255, 255, .8)",
                borderWidth: 4,
                backgroundColor: "transparent",
                fill: true,
                data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
                maxBarThickness: 6

            }],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false,
                }
            },
            interaction: {
                intersect: false,
                mode: 'index',
            },
            scales: {
                y: {
                    grid: {
                        drawBorder: false,
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: false,
                        borderDash: [5, 5],
                        color: 'rgba(255, 255, 255, .2)'
                    },
                    ticks: {
                        display: true,
                        padding: 10,
                        color: '#f8f9fa',
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
                x: {
                    grid: {
                        drawBorder: false,
                        display: false,
                        drawOnChartArea: false,
                        drawTicks: false,
                        borderDash: [5, 5]
                    },
                    ticks: {
                        display: true,
                        color: '#f8f9fa',
                        padding: 10,
                        font: {
                            size: 14,
                            weight: 300,
                            family: "Roboto",
                            style: 'normal',
                            lineHeight: 2
                        },
                    }
                },
            },
        },
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btnStart').forEach(function (button) {
            button.addEventListener('click', function (event) {
                event.preventDefault(); // 기본 이벤트 동작을 막음 (여기서는 링크 이동을 막음)

                // 1000ms(1초) 후에 페이지 이동
                setTimeout(function () {
                    var targetURL = button.parentElement.getAttribute('href');
                    window.location.href = targetURL;
                }, 1300);
            });
        });
    });
</script>
<script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
        var options = {
            damping: '0.5'
        }
        Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }







</script>
<!-- Github buttons -->
<script async defer src="https://buttons.github.io/buttons.js"></script>
<!-- Control Center for Material Dashboard: parallax effects, scripts for the example pages etc -->
<script src="assets/js/material-dashboard.min.js?v=3.0.0"></script>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width">
<script type="text/javascript" src="static/js/jquery-3.4.1.min.js"></script>
<link rel="stylesheet" type="text/css" href="static/css/reset.css" />
<link rel="stylesheet" type="text/css" href="static/css/test2.css" />
<script type="text/javascript" src="static/js/test2.js"></script>

</body>

</html>